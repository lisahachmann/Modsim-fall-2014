function res = speed_ang_sweep()
  %%Function to sweep the speed and angle of the FRC ball in iteration2_frc function below
  angle = [15:60]; %angle value to sweep in degrees
  speed = [1:35]; %speed value to sweep in m/s

  for i = 1:length(angle) %for all the angles
      for n = 1:length(speed) %sweep each speed
          time_in_goal(n, i) = iteration2_frc(speed(n), angle(i)); %save into a new row each time and column for each angle time
      end
  end

  %%plot using 3D graphing (surf)
  clf;
  hold on
  surf(angle, speed, time_in_goal) 
  size = 14;
  xlabel('Angle', 'Fontsize', size)
  ylabel('Speed(m/s)', 'Fontsize', size)
  zlabel('Distance in Goal Range(m)', 'Fontsize', size)
end

function res = iteration2_frc(speed, angle) 
%%This is a wraparound function for throwthis and %xyVelocity.
%The final version of the FRC ball project done by Brennan VanderHoek and Lisa Hachmann
%in a partnered project in Modsim fall 2014.
%Function models the FRC 2014 challenge, Aerial Assist and finds the range of distance
%that the ball can be thrown at the inputted speed and velocity. Wrap-around function has 
%been made to sweep those parameters. 

    vel = xyVelocity(speed, angle); %calls xyVelocity to breakdown speed/angle
    vx = vel(1); %velocity in x direction
    vy = vel(2); %velocity in y direction
    px = 0;  %initial position in x direction
    py = 0; %initial position in y direction
    tspan = [0:0.001:8]; %time lapse of ode45
    M = [px py vx vy]; %vector of all position and vectors
    goal_top = 3.04165 - 0.1524; %top of goal in meters - 25% of the ball's radius (abstraction for corner balls)
    goal_bottom = 2.1015 + 0.1524;% bottom of goal in meters - 25% of the ball's radius (abstraction for corner balls)
    
    function res = xyVelocity(velocity, angle)
      %%Takes a speed and angle and changes it into radians
      %and velocity in x and y directions, separately. 
      %Returns xVelocity and yVelocity in a Matrix
      
      radian = angle * (pi/180);
      xVelocity = cos(radian) * velocity;
      yVelocity = sin(radian) * velocity;
      res = [xVelocity, yVelocity];
    end

    options = odeset('Events', @events); %implements a function named Events to stop ode45 
    [T, X]= ode45(@throwthis_it2, tspan, M, options); %store ode45 into Matrix
    
%%Code to plot, commented out so to allow parameter sweeping 
%     clf;
%     hold on
%     plot(X(:,1), X(:,2), 'LineWidth', 1.5) %plot the position x versus y
%     xlabel('Distance in X (m)', 'Fontsize', 14)
%     ylabel('Distance in Y (m)', 'Fontsize', 14)
%     title('Flight Trajectory of an FRC Ball', 'Fontsize', 15)
    
    function res = throwthis_it2(t, W)
    %calculates the trajectory of the FRC ball
      %%store values
      P = W(1:2);     %position coordinates
      V = W(3:4);     %velocity coordinates in Vx and Vy
      dPdt = V;       %velocity is the derivative of position
      dVdt = acceleration(t, V); %get acceleration from time and velocity using acceleration function
      res = [dPdt; dVdt];           %give back the change in velocity and change in position
      
       function res = acceleration(t, V) 
       %find acceleration by computing forces
          %%variables
         c = 0.29; % drag constant
          p = 1.169; %kg/m^3 air density
          s = 100/60; %rotations/sec
         r = 0.6096/2; %ball radius in m
          a = pi*(r)^2; % cross section area of ball in m^2
          m = 1.229; % ball mass in kg
          
          %%magnus force/lift
          perp_V = [-V(2), V(1)]; %magnus force vector, perpindicular to velocity's direction
          Cl = 0.25; %coefficient of lift
         lift_x = (4/3)* (4*pi^2* r^3 * s*p) * perp_V(1); %magnus force/lift in X
          lift_y = (4/3)* (4*pi^2* r^3 * s*p) * perp_V(2); %magnus force/lift in Y
          drag_x = (-(c*p*a)/2)*norm(V)*V(1); %drag equation in X
          drag_y = (-(c*p*a)/2)*norm(V)*V(2); %drag equation in Y
          g = -9.8; % acceleration of gravity in m/s^2
         ax = (drag_x + (Cl*lift_x) )/m; %accelration in x direction using A = F/M
          ay = g + ((drag_y + (Cl*lift_y))/m); %acceleration in y direction using A = F/M
         res = [ax; ay];%give back the velocity coordinates
      end
  end 
    
    function [value, isterminal, direction] = events(T, X)
    %stops the ball when the ball is further than the midpoint of the field or lower than the goal
        value = (-X(1) + 8.2296);% *(X(2) - goal_bottom); % Extract the current x-position and height 
        isterminal = 1; % Stop the integration if height crosses zero.
        direction =-1; %Stop if the direction of the ball is down
    end
%%Finding if the ball is thrown into the goal

    length_x = X(:,1); %position x vector after being thrown
    height_y = X(:,2); %position y vector after being thrown
    bottom_length = 0; 
    
    bottom(1) = -1;
    topX(1) = 1;
    topY(1) = 1;
    
    for i = 1:length(length_x)  %for each value of position
        if height_y(i) >= goal_bottom %if ball is over the bottom of the goal
            bottom(bottom_length+1) = length_x(i); %save into bottom vector 
        end
        bottom_length = length(bottom); %update the bottom i 
    end
    
    for i = 1:length(length_x) %for each value of position
            if height_y(i) <= goal_top %if lower than the top of the goal
                topX(length(topX)+1) = length_x(i); %save into top X vector
                topY(length(topY)+1) = height_y(i);  %save into top Y vector
            end
            if height_y(i) >= goal_top %if ball height is taller than the top of the goal
                break
            end
    end
    for i = 1:length(topX) %gives the last bottom of goal value for shots that don't go over the top of the goal
        if max(height_y) <= goal_top %if ball trajectory crosses the vertex over the goal height
            if height_y(end) <= goal_bottom
            topX = interp1(height_y, length_x, goal_bottom); %finds the range of the shot's distance
            else
                topX = length_x(end);
            end
   
        end
        if max(height_y) <= goal_bottom %clears the output if the shot never makes it to the bottom of the goal
            topX = 0; 
            bottom(2) = 0;
        end
    end
    res = topX(end) - bottom(2); %shows the range of the distance a ball can move and still score
end 
